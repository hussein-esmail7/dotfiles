

# When making a change to this file, run 'source $PATH' in terminal to update it after saving this file

export EDITOR=vim 
export BROWSER=/usr/bin/brave       # Default browser to Brave instead of Firefox
export CLICOLOR=1
export LSCOLORS=ExFxBxDxCxegedabagacad

export PATH=$PATH:/usr/bin
export PATH=$PATH:/bin
export PATH=$PATH:/usr/sbin
export PATH=$PATH:/sbin
export PATH=$PATH:/usr/local/bin
export PATH=$PATH:/usr/X11/bin
export PYTHONPATH=$PYTHONPATH:$HOME/test/site-packages

# Setting history to unlimited
export HISTSIZE=-1 
export HISTFILESIZE=-1

export BASH_SILENCE_DEPRECATION_WARNING=1 # Get rid of "The interactive shell is zsh" message

# Personal Variables used while in Terminal
export SCHOOL='/home/hussein/Documents/School/1 Y3F'
export GIT='/home/hussein/git'
export CODE='/home/hussein/Documents/Coding'
export SITE='/hdd1/Website/husseinesmail'

# Quickly cd into my Python directory
alias py='cd ~/Documents/Coding/py'
alias pyf='cd ~/Documents/Coding/py/Finished'

# Compile file program
alias c='${CODE}/sh/c.sh'

# Always copy recursively, in case I'm copying a folder
alias cp='cp -r' 

alias v="vim"											# Editor shortcut
alias mv='mv -i'
alias rm='rm -i'
alias gitpush='git add . ; git commit ; git push'
alias nicefont='toilet -f mono9'						# Nice title text
alias yt='youtube-dl -ic -R 100 --no-check-certificate --yes-playlist --skip-unavailable-fragments --restrict-filenames --sub-lang en --no-warnings --embed-subs --no-part -f best  -o "%(title)s.%(ext)s"'
alias yta='${CODE}/sh/yta.sh'
alias wget='wget -crq --show-progress'
alias ip='echo -n "Local IP: \n" && ipconfig getifaddr en0 && echo -n "External IP: \n" && curl ipinfo.io/ip && echo'
alias music='musikcube'
alias config='~/git/dotfiles/config/terminal/config'
alias ls='ls -1 --quoting-style=literal -p' # -1: 1 file/dir per line, -p: directories have / at the end
alias now='date +"%Y %m %d"'
alias weather='curl wttr.in/Toronto'
alias server='python3 -m http.server'
alias school='cd && cd "$HOME/Documents/School - 1 University/1 Y1SU" && open .'
alias pdf='${CODE}/sh/pdf.sh'
alias update='${GIT}/sh/update.sh'
alias groff-cheetsheet='${CODE}/sh/groff-cheetsheet.sh'
alias b64='${GIT}/sh/b64.sh'
alias pass='${CODE}/sh/pass.sh'
alias template='${GIT}/template-maker/template-maker'
alias text='${CODE}/sh/text.sh'
alias news='pkill news ; newsboat -q'
alias ytw='${CODE}/sh/ytw.sh'
alias mkv='${CODE}/sh/mkv.sh'
# alias heic='for i in *.HEIC; do tifig -v -p "$i" "${i%".HEIC"}.jpg"; done'
alias z='zathura'
alias plex='${GIT}/sh/plex.sh'

# Prints ls with directories first, then files. Directories = blue, files = green. Directories are alphabetized, and so are files. Directories have a "/" at the end
# FIX LATER
# function ls() {
#     ls -Flh | sort -r | awk 'NF==9 { if ($1~/^d/) { printf "\033[1;34m" $9 "\033[0m" "\n" } else { printf "\033[1;32m" $9 "\033[0m" "\n" } }'
# }

if [[ "$OSTYPE" == "linux-gnu"* ]]; then # Linux System
    alias todo='$EDITOR ${HOME}/Downloads/todo.txt' # Quickly open my todo list
    alias spot='xdg-open `spot-f` &'
    alias school='xdg-open "${SCHOOL}" &' 
    alias y="yay"
    alias p="sudo pacman"
    alias ytfzf="ytfzf -t --preview-side=right"
elif [[ "$OSTYPE" == "darwin"* ]]; then # macOS System
	export PYTHONPATH=$PYTHONPATH:/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/
    export PATH=$PATH:${HOME}/Library/Python/3.9/bin
    export PATH=$PATH:/Library/Frameworks/Python.framework/Versions/3.9/bin
    export PATH=$PATH:/Library/TeX/texbin/
    export PATH=$PATH:/Library/TeX/texbin//
    export PATH=$PATH:/usr/local/texlive/2020basic/bin/universal-darwin
    
	alias todo='open ${HOME}/Downloads/todo.txt' # Quickly open my todo list
    alias spot='open `spot-f`'
    alias ip='echo -n "Local IP: \n" && ipconfig getifaddr en0 && echo -n "External IP: \n" && curl ipinfo.io/ip && echo'
    alias text='${HOME}/Documents/Coding/sh/text.sh'
	alias spot-f='find ~/Applications ~/Desktop ~/Documents ~/Downloads ~/git ~/Movies ~/.config ~/.newsboat -type f -not -path "*/\.git*/*" -not -path "*/\thumbs/*" -not -path "*/\Documents/Music/Music/*" -not -path "*/\*.localized/*" \( ! -iname ".DS_Store" ! -iname "Icon" ! -iname ".localized" ! -iname ".ini" ! -name ".git*" ! -name ".db*" \)| fzf'
fi

function sitepush() {
	# python3 "${GIT}/html2rss/html2rss.py" "$1"
	scp -r /hdd1/Backups/Website/husseinesmail/ root@husseinesmail.xyz:/var/www/
	echo "You need to copy the folder and name it '/hdd1/Backups/Website/$(date +\"%Y %m %d %H%M\")'/"
}

function mcd() {
    # Create directory and cd to it
    mkdir -p "$1" && cd "$1"
}

function heicr() {
	for i in *.HEIC; do
		tifig -v -p "$i" "${i%'.HEIC'}.jpg"
		rm -f "$i"
	done
}
# The git prompt's git commands are read-only and should not interfere with
# other processes. This environment variable is equivalent to running with `git
# --no-optional-locks`, but falls back gracefully for older versions of git.
# See git(1) for and git-status(1) for a description of that flag.
#
# We wrap in a local function instead of exporting the variable directly in
# order to avoid interfering with manually-run git commands by the user.
function __git_prompt_git() {
  GIT_OPTIONAL_LOCKS=0 command git "$@"
}

# Checks if working tree is dirty
function parse_git_dirty() {
  local STATUS
  local -a FLAGS
  FLAGS=('--porcelain')
  if [[ "$(__git_prompt_git config --get oh-my-zsh.hide-dirty)" != "1" ]]; then
    if [[ "${DISABLE_UNTRACKED_FILES_DIRTY:-}" == "true" ]]; then
      FLAGS+='--untracked-files=no'
    fi
    case "${GIT_STATUS_IGNORE_SUBMODULES:-}" in
      git)
        # let git decide (this respects per-repo config in .gitmodules)
        ;;
      *)
        # if unset: ignore dirty submodules
        # other values are passed to --ignore-submodules
        FLAGS+="--ignore-submodules=${GIT_STATUS_IGNORE_SUBMODULES:-dirty}"
        ;;
    esac
    STATUS=$(__git_prompt_git status ${FLAGS} 2> /dev/null | tail -1)
  fi
  if [[ -n $STATUS ]]; then
    echo "$ZSH_THEME_GIT_PROMPT_DIRTY"
  else
    echo "$ZSH_THEME_GIT_PROMPT_CLEAN"
  fi
}

# get current branch in git repo
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo "[${BRANCH}${STAT}]"
	else
		echo ""
	fi
}

function plural() {
    # Used for PS1 (for displaying number of files, and showing "1 file" instead of "1 files")
    # Must be before PS1 declaration
    [ "$(ls -1 | wc -l | sed 's: ::g')" -eq 1 ] || echo "s"
}

function search_history() {
	history | grep $1
}

PS1="\[\e[32m\]\u @ \$(date '+%Y %m %d %I:%M'):\[\e[00m\] \W (\$(ls -1 | wc -l | sed 's: ::g') file\$(plural)) > "
